PREFIX OPERATORS
	+           Plus
	-           Minus
	!           LogicNot
	^           BitNot
	*           Pointer
	&           Address
	[]          Span
	[$sizes]    ArrayClass
	($args) ->  ProcedureClass
	($args) =>  ProcedureLiteral



POSTFIX OPERATORS
	'                           Dereference
	.$field                     GetField
	.[$index]                   GetFieldByIndex
	[]                          Span
	[$index/$range]             Subscript/Slice
	($args)                     Call
	.($args)                    GetProcedure
	.{$values/$fields=$values}  Initialize
	? ($on_true) ($on_false)    Conditional



INFIX OPERATORS
	=    Assign
	<>=  ConcatAssign
	%=   ModuloAssign
	+=   AddAssign
	-=   SubtractAssign
	><=  CrossProductAssign
	*=   MultiplyAssign
	/=   DivideAssign
	**=  PowerAssign
	|=   BitOrAssign
	&=   BitAndAssign
	^=   BitXorAssign
	<<=  ShiftLeftAssign
	>>=  ShiftRightAssign

	||   LogicOr
	&&   LogicAnd
	==   Equal
	<    Less
	>    Greater
	@=   Contains
	..   Range
	<>   Concat

	%    Modulo
	+    Add
	+%   ModuloAdd
	+|   SaturateAdd
	+@   ExpandedAdd
	-    Subtract
	-%   ModuloSubtract
	-|   SaturateSubtract
	-@   ExpandedSubtract
	><   CrossProduct
	*    Multiply
	*%   ModuloMultiply
	*|   SaturateMultiply
	*@   ExpandedMultiply
	/    Divide
	/@   ExpandedDivide
	**   Power

	|    BitOr
	*    BitAnd
	^    BitXor
	<<   ShiftLeft
	<<|  FullShiftLeft 
	<<%  RotateLeft
	>>   ShiftRight
	>>|  FullShiftRight
	>>%  RotateRight

	~    Cast
	~%~  Reinterpret
	|>   Pipe


x := with m:=0, for e:arr if e>m { m=e }, m

x := for e : arr { if e == value break (True) } else { False }

x := {#for c : 'A'..'Z'+1 {c}}


IMPLICIT CASTS THAT REQUIRE SOME CODE MODIFICATION:
	unsinged          -> bigger unsigned, bigger/equal integer
	zero unsigned     -> enum
	comptime unsigned -> any unsigned, any integer
	integer           -> bigger integer
	comptime integer  -> any integer, any unsigned
	bool              -> any unsigned, any integer
	comptime float    -> other float
	comptime span     -> array
	enum              -> unsigned or integer that can represent its values
	procedure         -> proc pointer
	procedure         -> fat proc pointer
	fat procedure     -> fat proc pointer
	empty init list   -> anything
	init list         -> array, tuple, struct, union
	enum literal      -> enum

IMPLICIT CASTS THAT DONT REQUIRE CODE MODIFICATION:
	void pointer -> any pointer
	any pointer  -> void pointer

